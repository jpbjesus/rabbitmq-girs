version: '3.8'

networks:
    cluster-network:
        external: true
        name: cluster-network
    
volumes:
    elasticsearch_data:

services:
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.7.1
        networks:
            - cluster-network
        environment:
            - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
            - "discovery.type=single-node"
        ports:
            - '9200:9200'
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        labels:
            com.docker.stack.namespace: "rmq-logging"
            com.docker.service.name: "elasticsearch"
        deploy:
            mode: replicated
            update_config:
                parallelism: 1
                delay: 60s
            restart_policy:
                condition: none
                max_attempts: 5
            labels:
                com.docker.stack.namespace: "rmq-logging"
                com.docker.service.name: "elasticsearch"

    kibana:
        image: docker.elastic.co/kibana/kibana:7.7.1
        networks:
            - cluster-network
        ports:
            - '5601:5601'
        labels:
            com.docker.stack.namespace: "rmq-logging"
            com.docker.service.name: "kibana"
        deploy:
            mode: replicated
            update_config:
                parallelism: 1
                delay: 60s
            restart_policy:
                condition: none
                max_attempts: 5
            labels:
                com.docker.stack.namespace: "rmq-logging"
                com.docker.service.name: "kibana"

    # logstash:
    #     image: docker.elastic.co/logstash/logstash:7.7.1
    #     networks:
    #         - cluster-network
    #     ports:
    #         - '5044:5044'
    #     labels:
    #         com.docker.stack.namespace: "rmq-logging"
    #         com.docker.service.name: "logstash"
    #     deploy:
    #         mode: replicated
    #         update_config:
    #             parallelism: 1
    #             delay: 60s
    #         restart_policy:
    #             condition: none
    #             max_attempts: 5
    #         labels:
    #             com.docker.stack.namespace: "rmq-logging"
    #             com.docker.service.name: "logstash"

    logstash:
        image: docker.elastic.co/logstash/logstash:7.7.1
        ports:
            - "12201:12201/udp"         
            - "8080:8082"
        networks:
            - cluster-network
        command: -e "input { gelf {} } output { elasticsearch { hosts => ['elasticsearch']} stdout {} }"
        labels:
            com.docker.stack.namespace: "rmq-logging"
            com.docker.service.name: "logstash"
        deploy:
            mode: replicated
            update_config:
                parallelism: 1
                delay: 60s
            restart_policy:
                condition: none
                max_attempts: 5
            labels:
                com.docker.stack.namespace: "rmq-logging"
                com.docker.service.name: "logstash"